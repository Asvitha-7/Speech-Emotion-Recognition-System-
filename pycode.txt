import numpy as p
import pandas as pd
import os
import librosa
import wave
import matplotlib.pyplot as plt


#MLP Classifier
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score


#LSTM Classifier
import keras
from tensorflow.keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import *
from keras.optimizer_v1 import *
from tensorflow.keras.optimizers import RMSprop- this works
songs vinani prashantanga
endhuk
emaindi? nen matram em cheyan errors thone ipoyindi



#split the trsining, validating, and testing sets
number_of_samples=radvess_speech_data_array.shape[0]
training_samples=int(number_of_samples*0.8)
validation_samples=int(number_of_samples*0.1)
test_samples=int(number_of_samples*0.1)


from keras.engine import input_layer
#LSTM Model
def craete_model_LSTM():
  model=Sequential()
  model.add(LSTM(128,return_sequences=False,input_shape=(40,1)))
  model.add(Dense(64))
  model.add(Dropout(0.4))
  model.addActivation('relu')
  model.add(Dense(32))
  model.add(Dropout(0.4))
  model.addActivation('relu')
  model.add(Dense(8))
  model.addActivation('softmax')


  #Configures the model for taining
  model.compile(loss='category_crossentrophy', optimizer='Adam',metrics=['accuracy'])
  return model

w=np.expand_dims(radvess_speech_data_array[:training_samples],-1)


w.shape

model_A=create_model_LSTM()
history=model_A.fit(np.expand_dims(radvess_speech_data_array[:training_samples],-1),
labels_categorical[:training_samples], Validation_data=(np.expand_dims(radvess_speech_data_array[training_samples +validation_samples],-1),
 labels_categorical[training_samples:training_samples +validation_samples]),epochs=130,shuffle=True)

### loss plots using LSTM Model
loss=history.history['loss']
val_loss=history.history['val_loss']
epochs=range(1,len(loss)+1)

plt.plot(epochs, loss, Loading.label='Training loss')
plt.plot(epochs, val_loss, 'b',label='validation loss')
plt.title('Training and validaation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()



questions
1. Reason behind the accuracy?
models=