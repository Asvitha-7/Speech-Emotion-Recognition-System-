# -*- coding: utf-8 -*-
"""Speech Emotion Recognition System3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OQmz9GASEsGJMihEX2KLHCndT03fy4eO
"""

import numpy as np
import pandas as pd
import os
import librosa
import wave
import matplotlib.pyplot as plt

#MLP Classifier
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score

#!pip install tensorflow

#LSTM Classifier
import keras
from tensorflow.keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import *
from keras.optimizers import RMSprop



#import tensorflow.keras



from google.colab import drive
drive.mount('/content/drive')

def extract_mfcc(wav_file_name):
  y,sr=librosa.load(wav_file_name)
  mfccs=np.mean(librosa.feature.mfcc(y=y,sr=sr,n_mfcc=40).T,axis=0)


  return mfccs

radvess_speech_labels=[]
radvess_speech_data=[]
for dirname,_,filenames in os.walk('/content/drive/MyDrive/Colab Notebooks/ravdess data set'):
  for filename in filenames:
    radvess_speech_labels.append(int(filename[7:8])-1)
    wav_file_name=os.path.join(dirname,filename)
    radvess_speech_data.append(extract_mfcc(wav_file_name))
print("finishing loading data set")

radvess_speech_data

#import keras
print(keras.__version__)
#import tensorflow as tf
print(tf. __version__)





radvess_speech_data_array=np.asarray(radvess_speech_data)
radvess_speech_label_array=np.array(radvess_speech_labels)
radvess_speech_label_array.shape


labels_categorical=to_categorical(radvess_speech_label_array)
labels_categorical.shape

x_train,x_test,y_train,y_test=train_test_split(np.array(radvess_speech_data_array),labels_categorical,test_size=0.20,random_state=9)

#split the trsining, validating, and testing sets
number_of_samples=radvess_speech_data_array.shape[0]
training_samples=int(number_of_samples*0.8)
validation_samples=int(number_of_samples*0.1)
test_samples=int(number_of_samples*0.1)

#pip install keras==2.3.1

from tensorflow.keras import optimizers
optimizers.RMSprop
optimizers.Adam

from keras.engine import input_layer
#LSTM Model
def create_model_LSTM():
  model=Sequential()
  model.add(LSTM(128,return_sequences=False,input_shape=(40,1)))
  model.add(Dense(64))
  model.add(Dropout(0.4))
  model.add(Activation('relu'))
  model.add(Dense(32))
  model.add(Dropout(0.4))
  model.add(Activation('relu'))
  model.add(Dense(8))
  model.add(Activation('softmax'))


  #Configures the model for taining
  model.compile(loss='categorical_crossentropy', optimizer='Adam',metrics=['accuracy'])
  return model

w=np.expand_dims(radvess_speech_data_array[:training_samples],-1)

w.shape





model_A=create_model_LSTM()

history=model_A.fit(np.expand_dims(radvess_speech_data_array[:training_samples],-1), labels_categorical[:training_samples], validation_data=(np.expand_dims(radvess_speech_data_array[training_samples:training_samples+validation_samples],-1), labels_categorical[training_samples: training_samples + validation_samples]), epochs=130, shuffle=True)

### loss plots using LSTM Model
loss=history.history['loss']
val_loss=history.history['val_loss']
epochs=range(1,len(loss)+1)

plt.plot(epochs, loss, 'ro',label='Training loss')
plt.plot(epochs, val_loss, 'b',label='validation loss')
plt.title('Training and validaation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

acc=history.history['accuracy']
val_acc=history.history['val_accuracy']

plt.plot(epochs, acc, 'ro',label='Training acc')
plt.plot(epochs, val_loss, 'b',label='validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('accuracy')
plt.legend()

plt.show()

model_A.evaluate(np.expand_dims(radvess_speech_data_array[training_samples + validation_samples:], -1), labels_categorical[training_samples + validation_samples:])

emotions={1:'neutral',2:'calm',3:'happy',4:'sad',5:'angry',6:'fearful',7:'disgust',8:'surprised'}
def predict(wav_filepath):
  test_point=extract_mfcc(wav_filepath)
  test_point=np.reshape(test_point, newshape=(1,40,1))
  predictions=model_A.predict(test_point)
  print(emotions[np.argmax(predictions[0])+1])

predict('/content/drive/MyDrive/Colab Notebooks/ravdess data set/Actor_01/03-01-01-01-01-01-01.wav')

predict('/content/drive/MyDrive/Colab Notebooks/ravdess data set/Actor_01/03-01-02-02-01-01-01.wav')

predict('/content/drive/MyDrive/Colab Notebooks/ravdess data set/Actor_01/03-01-05-01-02-02-01.wav')

predict('/content/drive/MyDrive/Colab Notebooks/ravdess data set/Actor_07/03-01-01-01-02-01-07.wav')

model_A.save("final_model.h5")

